{"version":3,"sources":["TopBar.js","MyMenu.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["TopBar","className","src","logo","alt","React","Component","SubMenu","Menu","MyMenu","state","theme","current","handleClick","e","console","log","setState","key","this","onClick","style","width","defaultOpenKeys","selectedKeys","mode","title","type","Item","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"kPAGaA,EAAb,iLAEI,OACE,4BAAQC,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,yBAAKH,UAAU,aAAf,sBALR,GAA4BI,IAAMC,W,iBCA1BC,EAAYC,IAAZD,QAEKE,EAAb,2MACEC,MAAQ,CACNC,MAAO,OACPC,QAAS,KAHb,EAMEC,YAAc,SAAAC,GACZC,QAAQC,IAAI,SAAUF,GACtB,EAAKG,SAAS,CACZL,QAASE,EAAEI,OATjB,wEAcI,OACE,6BACE,kBAAC,IAAD,CACEP,MAAOQ,KAAKT,MAAMC,MAClBS,QAASD,KAAKN,YACdQ,MAAO,CAAEC,MAAO,KAChBC,gBAAiB,CAAC,QAClBC,aAAc,CAACL,KAAKT,MAAME,SAC1Ba,KAAK,UAEL,kBAAClB,EAAD,CACEW,IAAI,OACJQ,MACE,8BACE,kBAAC,IAAD,CAAMC,KAAK,SACX,kDAIJ,kBAAC,IAAKC,KAAN,CAAWV,IAAI,KAAf,YACA,kBAAC,IAAKU,KAAN,CAAWV,IAAI,KAAf,YACA,kBAAC,IAAKU,KAAN,CAAWV,IAAI,KAAf,YACA,kBAAC,IAAKU,KAAN,CAAWV,IAAI,KAAf,aAEF,kBAACX,EAAD,CACEW,IAAI,OACJQ,MACE,8BACE,kBAAC,IAAD,CAAMC,KAAK,aACX,iDAIJ,kBAAC,IAAKC,KAAN,CAAWV,IAAI,KAAf,YACA,kBAAC,IAAKU,KAAN,CAAWV,IAAI,KAAf,YACA,kBAACX,EAAD,CAASW,IAAI,OAAOQ,MAAM,WACxB,kBAAC,IAAKE,KAAN,CAAWV,IAAI,KAAf,YACA,kBAAC,IAAKU,KAAN,CAAWV,IAAI,KAAf,cAGJ,kBAACX,EAAD,CACEW,IAAI,OACJQ,MACE,8BACE,kBAAC,IAAD,CAAMC,KAAK,YACX,oDAIJ,kBAAC,IAAKC,KAAN,CAAWV,IAAI,KAAf,YACA,kBAAC,IAAKU,KAAN,CAAWV,IAAI,MAAf,aACA,kBAAC,IAAKU,KAAN,CAAWV,IAAI,MAAf,aACA,kBAAC,IAAKU,KAAN,CAAWV,IAAI,MAAf,oBAlEZ,GAA4Bb,IAAMC,WCWnBuB,G,wLATX,OACE,yBAAK5B,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GALUK,cCOEwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB,mBEnInBC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.9ccc8eb4.chunk.js","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\n\nexport class TopBar extends React.Component {\n  render() {\n    return (\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <div className=\"App-title\">Personal Blog</div>\n      </header>\n    );\n  }\n}","import React from 'react';\nimport { Menu, Icon, Switch } from 'antd';\n\nconst { SubMenu } = Menu;\n\nexport class MyMenu extends React.Component {\n  state = {\n    theme: 'dark',\n    current: '1',\n  };\n\n  handleClick = e => {\n    console.log('click ', e);\n    this.setState({\n      current: e.key,\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <Menu\n          theme={this.state.theme}\n          onClick={this.handleClick}\n          style={{ width: 256 }}\n          defaultOpenKeys={['sub1']}\n          selectedKeys={[this.state.current]}\n          mode=\"inline\"\n        >\n          <SubMenu\n            key=\"sub1\"\n            title={\n              <span>\n                <Icon type=\"mail\" />\n                <span>Navigation One</span>\n              </span>\n            }\n          >\n            <Menu.Item key=\"1\">Option 1</Menu.Item>\n            <Menu.Item key=\"2\">Option 2</Menu.Item>\n            <Menu.Item key=\"3\">Option 3</Menu.Item>\n            <Menu.Item key=\"4\">Option 4</Menu.Item>\n          </SubMenu>\n          <SubMenu\n            key=\"sub2\"\n            title={\n              <span>\n                <Icon type=\"appstore\" />\n                <span>Navigtion Two</span>\n              </span>\n            }\n          >\n            <Menu.Item key=\"5\">Option 5</Menu.Item>\n            <Menu.Item key=\"6\">Option 6</Menu.Item>\n            <SubMenu key=\"sub3\" title=\"Submenu\">\n              <Menu.Item key=\"7\">Option 7</Menu.Item>\n              <Menu.Item key=\"8\">Option 8</Menu.Item>\n            </SubMenu>\n          </SubMenu>\n          <SubMenu\n            key=\"sub4\"\n            title={\n              <span>\n                <Icon type=\"setting\" />\n                <span>Navigation Three</span>\n              </span>\n            }\n          >\n            <Menu.Item key=\"9\">Option 9</Menu.Item>\n            <Menu.Item key=\"10\">Option 10</Menu.Item>\n            <Menu.Item key=\"11\">Option 11</Menu.Item>\n            <Menu.Item key=\"12\">Option 12</Menu.Item>\n          </SubMenu>\n        </Menu>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { TopBar } from './TopBar';\nimport { MyMenu } from './MyMenu';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <TopBar/>\n        <MyMenu/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}